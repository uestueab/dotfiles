priority -50

extends texmath

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''
	
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal

snippet "b(egin)?" "begin{} / end{}" br
\begin{${1:something}}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r  
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}%
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section" b
\section{${1:section name}}%

$0
endsnippet

snippet sec* "Section" b
\section*{${1:section name}}%

${0}
endsnippet


snippet sub "Subsection" b
\subsection{${1:subsection name}}%

$0
endsnippet

snippet sub* "Subsection" b
\subsection*{${1:subsection name}}%

${0}
endsnippet

snippet ssub "Subsubsection" b
\subsubsection{${1:subsubsection name}}%

$0
endsnippet

snippet ssub* "Subsubsection" b
\subsubsection*{${1:subsubsection name}}%

${0}
endsnippet

snippet par "Paragraph" b
\paragraph{${1:paragraph name}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph" b
\subparagraph{${1:subparagraph name}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet



snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis"
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

	
snippet doc "new document"
\documentclass{article}
 
%encoding and formating
%--------------------------------------
\usepackage[utf8]{inputenc}
\usepackage[parfill]{parskip} %deals with indentation
\usepackage[T1]{fontenc}
%--------------------------------------
 
%German-specific commands
%--------------------------------------
\usepackage[german]{babel}
%--------------------------------------


%Math related packages and custom commands
%--------------------------------------
\usepackage{amsmath}
\usepackage{amssymb}
\newcommand{\R}{\mathbb{R}}
%--------------------------------------



\begin{document}
\title{${1:enter title}}
\author{Ablakim Giray Üstün}
\maketitle
    
\end{document}
endsnippet

snippet floor "floor func"
\lfloor ${1:number}  \rfloor 
endsnippet

snippet ceil "ceil func"
\lceil ${1:number}  \rceil 
endsnippet

snippet  ieq "inline equation"
\(${1: enter equation}\)
endsnippet
	
snippet  ceq "inline centred equation"
\[${1: enter equation}\]
endsnippet

snippet lim "limes from x to.."
$\displaystyle \lim_{x\to \infty}
endsnippet
	
snippet scap "side caption"
% make sure to include: \usepackage{subcaption} %
\begin{figure}[htpb]
\floatbox[{\capbeside\thisfloatsetup{capbesideposition={${1:left},${2:top}},capbesidewidth=6cm}}]{figure}[\FBwidth]
{\caption{${3:caption text}}\label{fig:test}}
{\includegraphics[height=3cm, width=5cm]{${4:image name}}}
\end{figure}
endsnippet

#Enable only when needed!!
# snippet // "Fraction" iA
# \\frac{$1}{$2}$0
# endsnippet

# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet inm "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dim "Math" wA
\[
$1
.\] $0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

snippet '([A-Za-z]+)math' "math symbols" wrA
\\mathbb{`!p snip.rv = match.group(1)`}$0
endsnippet

snippet tbf "bold"
\textbf{$1}$0
endsnippet


snippet uline "bold"
\underline{$1}$0
endsnippet

snippet => "rightarrow"
\Rightarrow
endsnippet

snippet "vsp(ace)?" "vspace" r
\vspace{$1}$0
endsnippet


snippet "sqr(t)?" "square root" r
\sqrt{$1}$0
endsnippet

snippet hline "horizontal line"
\noindent\rule{\textwidth}{1pt}
$0
endsnippet

snippet sset "make a set" 
\\{$1\\}
endsnippet

snippet "foo(t)?" "footnote" r
\footnote{$1}
endsnippet

snippet cc "subset"
\subset
endsnippet

snippet cceq "subset equal"
\subseteq
endsnippet

snippet qq "quad" w
\quad $0
endsnippet

snippet "equ(ation)?" "equation" r
\begin{equation*}
\begin{aligned}
	$0
\end{aligned}
\end{equation*}
endsnippet

snippet "sum" "sum from to" w
\sum_{${1:i=1}}^{${2:\infty}} $3
endsnippet

snippet "case" "case"
\[
  ${1:X(m, n)} = \left.
  \begin{cases}
    ${2:x(n)}, & \text{for } ${3:0 \leq n \leq 1} \\
    ${4:x(n - 1)}, & \text{for } ${5:0 \leq n \leq 1}
  \end{cases}
 \right\}
\]
endsnippet

snippet "txt" "text"
\text{$1}$0
endsnippet

snippet "ita" "italic text"
\textit{$1}$0
endsnippet

snippet "tover" "text over text"
\overbrace{\hbox{${1:text}}}^{\hbox{\scriptsize ${2:textAbove}}} $0
endsnippet

snippet := "definition"
\coloneqq $0
endsnippet

snippet "til(da)?" "tilda" r
\sim
endsnippet

snippet -> "rightarrow"
\rightarrow
endsnippet

snippet ->txt "txt over rightarrow"
\xrightarrow{\text{${1:text}}}$0
endsnippet


snippet binom "binomial"
\binom{$1}{$2}$0
endsnippet

snippet "roman" "enumerate roman" w
\begin{enumerate}[label=\Roman*]
	$1
\end{enumerate}
endsnippet

snippet "tc" "textcolor"
\textcolor{${1:color}}{${2:text}}$0
endsnippet

snippet mbf "bold"
\mathbf{$1}$0
endsnippet

snippet "" "quotes"
\enquote{${1:text}}$0
endsnippet

snippet "tunder" "text under text"
\underbrace{${1:text}}_{\hbox{\scriptsize ${2:textBelow}}}$0
endsnippet
# vim:ft=snippets:
