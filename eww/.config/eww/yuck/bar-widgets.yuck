(defwidget bar [monitor]
    (centerbox  
      :class "main-bar"
      (left :monitor monitor)
      (box);
      (right :monitor monitor)))
  
(defwidget left [monitor]
  (box 
    :space-evenly false
    :spacing 5
    :halign "start"
    (launcher)
    (box
      :class "block workspaces"
      :space-evenly false
      (workspaces :monitor monitor)
    )
    (mode)
    ;(window)
  )
) 

(defwidget right [monitor]
  (box 
    :space-evenly false
    :spacing 5
    :halign "end"
    ;(music)
    ; (settings)
    ;(battery :monitor monitor)
    (datetime)
    (tray)
  )
)

(defwidget launcher []
  (eventbox
    :cursor "pointer"
    :tooltip "Apps"
    (button 
      :class "block launcher"
      :onclick "notify-send 'Notification' 'Test ...123... :)' "
      ;:onrightclick "rofi -show power-menu -modi power-menu:rofi-power-menu -config ~/.config/rofi/config-power.rasi &"
      "")))


(defwidget workspaces [monitor]
  (box
    :space-evenly false
    (for workspace in workspaces
      (eventbox
        :cursor "pointer"
        :visible {workspace.output == monitor ? true : false}
        (button
          ;:class {arraylength(workspaces) == 1 ? "ws" : workspace.focused ? "active-ws" : "ws"}
          :class {workspace.focused ? "active-ws" : "ws"}
          :onclick "i3-msg workspace ${workspace.name}"
          "${workspace.name == 1 ? "web"
                : workspace.name == 2 ? "term"
                : workspace.name == 3 ? "vim"
                : workspace.name == 4 ? "study"
                : workspace.name == 5 ? "idle"
                : workspace.name == 6 ? "misc"
                : workspace.name == 7 ? "steam" : ""
                }")))))

(defwidget mode []
  (box
    :class "${mode == "default" ? "" : "block"} mode"
    :space-evenly false
    :halign "end"
    (label
      :class "separator"
      :visible {mode == "default" ? false : true}
      :text "󰄾")
    (label
      :visible {mode == "default" ? false : true}
      :class {mode == "default" ? "" : "mode-entered"}
      :text "${mode}")))

;(defwidget window []
;  (label 
;    :class "block" 
;    :visible {window != "" ? true : false}
;    :text "${window}"))

(defwidget datetime []
  (label
    :class "block date"
    :text "${datetime}"))

;(defwidget music []
;  (box
;    :class "block music"
;    :space-evenly false
;    (label 
;      :class "song-title"
;      :visible {player.player ? true : false} 
;      :text "${player.title}")
;    (label 
;      :class "separator" 
;      :visible {player.player ? true : false} 
;      :text "|") 
;    (eventbox
;      :cursor "pointer"
;      (button
;        :class "song-prev"
;        :visible {player.player ? true : false}
;        :onclick "playerctl -p spotify previous"
;        "玲"))
;    (eventbox
;      :cursor "pointer"
;      (button
;        :visible {player.player ? true : false}
;        :onclick "playerctl -p spotify play-pause" 
;        (label :text {player.playing ? "" : "契"})))
;    (eventbox
;      :cursor "pointer"
;      (button
;        :class "song-next"
;        :visible {player.player ? true : false}
;        :onclick "playerctl -p spotify next"
;        "怜"))
;    (label 
;      :class "separator" 
;      :visible {player.player ? true : false} 
;      :text "|") 
;    (eventbox
;      :cursor "pointer"
;      (button
;        :class {player.player ? "launch-music" : "launch-music closed"}
;        :onclick "~/.config/eww/scripts/open-spotify.sh &"
;        ""))))

;(defwidget settings []
;  (box
;    :class "block"
;    (button
;      :onclick ;"~/.config/eww/scripts/open-bluetooth.sh ${bluetoothopen} &"
;      "BL")))

;(defwidget battery [monitor]
;  (box
;    :class "block battery"
;    (eventbox
;      :onhover "eww update batterypercent=${monitor}"
;      :onhoverlost "eww update batterypercent=false"
;      (box
;        :class "battery-inner"
;        :space-evenly false
;        (label 
;          :class "battery-icon" 
;          :text "${battery.icon}")
;        (revealer
;          :class "battery-percent"
;          :transition "slideright"
;          :reveal {batterypercent == monitor}
;          "${battery.percent}%")))))

(defwidget tray []
  (box
    :class "block tray"
    (eventbox :onhover "eww update hover_tray=true" :onhoverlost "eww update hover_tray=false"
      :cursor "pointer" :class "block date ${hover_tray ? "hover_tray" : "" }"
      (button
        :onclick "~/.config/eww/scripts/open-tray.sh ${tray} &"
        ""))))


(defwindow volume
	:geometry (geometry :y "8%" :height: "10%" :width "10%" :anchor "top right")
        (box
        :class "volume-popup-bar"
        (scale
          :min 0 
          :max 101
          :value 80
        )
      )
)
